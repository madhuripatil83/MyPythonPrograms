list1.append(y%2==0 for y in list)
>>> list1
[False, True, False, True, False, True, False, True, False, <generator object <genexpr> at 0x000001CE64979A10>]

 list1 = [ y for y in list if y%2==0]
>>> list1
[2, 4, 6, 8]


create a function  that takes dimensions as tuples(3,3) and a numeric value and returns a Numpy array of the given dimension filled with given value

import numpy as np

def solve(tup,a) :
  arr = np.full(tup,a)
  print(arr)

tup = (3,3)
a = 5
solve(tup,a)

output :

[[5 5 5]
 [5 5 5]
 [5 5 5]]
 
 
 given a 2D array of NxM dimension ,extraxt top left NxM submatrix
 a = np.array([[1,2,3],[4,5,6],[7,8,9]])

print(a[:2 ,:2])
[[1 2]
 [4 5]]
 
 
 3x3 matrix using numpy
 
 import numpy as np
a= np.arange(2,11).reshape(3,3)
print (a)

[[ 2  3  4]
 [ 5  6  7]
 [ 8  9 10]]
 
 convert datatype of array
 
 import numpy as np
b = np.array([[1,2,3,4]])
print(b)
b = b.astype(np.float32)
print(b)
 
 create a list and apply append and reverse fucntion to it
 
 mylist = [10,20,20,'apple',True,8.10]
mylist.append(30)
mylist.append(40)
print(mylist)
mylist.reverse()
print(mylist)
revlist = mylist.copy()
print(revlist)

output:
[10, 20, 20, 'apple', True, 8.1, 30, 40]
[40, 30, 8.1, True, 'apple', 20, 20, 10]
[40, 30, 8.1, True, 'apple', 20, 20, 10]


 extract bottom right
 
 a = np.array([[1,2,3],[4,5,6],[7,8,9]])

print(a[1: ,1:])
[[5 6]
 [8 9]]

#dictionary code snippets

mydict = {1:'data',2:'information',3:'text'}
print(mydict)

output
{1: 'data', 2: 'information', 3: 'text'}

mydict.pop(3)
print(mydict)

output
{1: 'data', 2: 'information'}

mydict[3] = 'features'
print(mydict)

output
{1: 'data', 2: 'information', 3: 'features'}

print(mydict[1])
output
data


#append array

import numpy as np
a = np.array([[10,20,30]])
np.append(a, [[40,50,60]] , axis = 0)
print(a)

#OUTPUT
[[10,20,30]
 [40,50,60]]
 
 #add 2 arrays
 
 import numpy as np
 a=np.array([[10,20,30]])
 b=np.array([[40,50,60]])
 sumarr=np.add(a,b)
 print(sumarr)
 
 output [[50 70 90]]


#in 3x3 array print first row and last element

import numpy as np
newarr = np.arange(10,100,10)
newarr = newarr.reshape(3,3)
print(newarr)
print(newarr[0:1])
print(newarr[2: ,2:])

#output

[[10 20 30]
 [40 50 60]
 [70 80 90]]
[[10 20 30]]
[[90]]
